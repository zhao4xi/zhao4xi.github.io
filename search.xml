<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>aop的原理探究</title>
      <link href="/2019/09/17/aop%E7%9A%84%E5%8E%9F%E7%90%86%E6%8E%A2%E7%A9%B6/"/>
      <url>/2019/09/17/aop%E7%9A%84%E5%8E%9F%E7%90%86%E6%8E%A2%E7%A9%B6/</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>aop的概念时常提起, 但是没有在实际场景中使用, 最近有机会在实际场景中运用, 这里深入的记录一下探索过程.</p><h2 id="aop-的分类"><a href="#aop-的分类" class="headerlink" title="aop 的分类"></a>aop 的分类</h2><p>aop 全称: Aspect Oriented Programming , 即面向切面编程, 是在编译时或者运行时为某一个切点(一般是方法)添加统一的功能的一种编码方式.</p><blockquote><p>编译时AOP(静态织入), 常见的框架 PostSharp(主流用法, 基于mono.cicel + MSbuild, 也可以运行时AOP)<br>运行时AOP(动态代理), 常见框架 Castle, 主流 IOC 框架实现代理</p></blockquote><h2 id="编译时AOP"><a href="#编译时AOP" class="headerlink" title="编译时AOP"></a>编译时AOP</h2><p>根据名称可以知道, 这个过程发生在dll编译的时候. 编译时AOP是将织入的方法通过IL的方式直接写入编译的dll中. 这一点通过反编译postsharp 等工具的生成dll 可知<br><strong>优点</strong>: 整体效率比运行时要高, 功能强大.<br><strong>缺点</strong>: 修改代码需要重新通过专门的编译器编译, 操作相对复杂.</p><h2 id="运行时AOP"><a href="#运行时AOP" class="headerlink" title="运行时AOP"></a>运行时AOP</h2><p>通常使用系统自带的反射机制或者第三方IOC框架在运行时动态执行需要织入的方法.<br><strong>优点</strong>: 核心思想和使用都比较简单<br><strong>缺点</strong>: 性能略低, 一般只适合方法的调用.<br>下面使用.net Remoting 来实现一个简单的 aop 功能</p><pre><code class="csharp">    static void Main(string[] args)    {        var service = TinyAop.Create&lt;IServiceA, ServiceA&gt;(new LogInterceptor(), new ErrorInterceptor());        service.Say(&quot;hello world&quot;);        service.Error();        Console.Read();    }    interface IServiceA { void Say(string word); void Error(); }    public class ServiceA : IServiceA    {          public void Error()        {            throw new Exception(&quot;出错啦&quot;);        }        public void Say(string word)        {            Console.WriteLine(word);        }    }    class LogInterceptor : Interceptor    {        public void Invoke(Invocation invocation)        {            try            {                Console.WriteLine(&quot;before log&quot;);                invocation.Proceed();                Console.WriteLine(&quot;after log&quot;);            }            catch (Exception ex)            {                Console.WriteLine(ex.InnerException);                invocation.ReturnValue = &quot;出错啦&quot;;            }        }    }    class ErrorInterceptor : Interceptor    {        public void Invoke(Invocation invocation)        {            try            {                invocation.Proceed();            }            catch (Exception ex)            {                invocation.ReturnValue = &quot;出错啦&quot;;                Console.WriteLine(ex.InnerException);            }        }    }    class TinyAop    {        public static T Create&lt;IT, T&gt;(params Interceptor[] interceptors)        {            T instance = Activator.CreateInstance&lt;T&gt;();            RealProxyEx&lt;T&gt; realProxy = new RealProxyEx&lt;T&gt;(instance, interceptors);            T transparentProxy = (T)realProxy.GetTransparentProxy();            return transparentProxy;        }    }    class RealProxyEx&lt;T&gt; : RealProxy    {        private object _target;        private Interceptor[] _interceptors;        public RealProxyEx(object target, Interceptor[] interceptors) : base(typeof(T))        {            _target = target;            _interceptors = interceptors;        }        public override IMessage Invoke(IMessage msg)        {            Invocation invocation = new Invocation(msg, _target);            if (_interceptors != null &amp;&amp; _interceptors.Length &gt; 0)            {                foreach (var item in _interceptors)                {                    item.Invoke(invocation);                }            }            else            {                invocation.Proceed();            }            return new ReturnMessage(invocation.ReturnValue, new object[0], 0, null, invocation.CallMessage);        }    }    class Invocation    {        public MethodBase Method { get; set; }        public object ReturnValue { get; set; }        public IMethodCallMessage CallMessage =&gt; (IMethodCallMessage)_msg;        private IMessage _msg;        private object _target;        public Invocation(IMessage msg, object target)        {            _target = target;            _msg = msg;        }        public void Proceed()        {            IMethodCallMessage callMessage = (IMethodCallMessage)_msg;            Method = callMessage.MethodBase;            ReturnValue = Method.Invoke(_target, callMessage.Args);        }    }    interface Interceptor    {        void Invoke(Invocation invocation);    }</code></pre><h2 id="隔壁spring框架中的类比"><a href="#隔壁spring框架中的类比" class="headerlink" title="隔壁spring框架中的类比"></a>隔壁spring框架中的类比</h2><blockquote><p>编译时: AspectJ<br>运行时: jdk(一般代理接口), cglib (代理(重写)实现类)</p></blockquote><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>AOP的思想比如何使用更重要, 仔细学习看看, 其实很简单.</p><h3 id="代码托管地址"><a href="#代码托管地址" class="headerlink" title="代码托管地址"></a><a href="https://github.com/zhao4xi/TinyIocAndAop" target="_blank" rel="noopener">代码托管地址</a></h3>]]></content>
      
      
      <categories>
          
          <category> 框架 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> aop </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ioc循环依赖的发现与解决</title>
      <link href="/2019/09/16/ioc%E5%BE%AA%E7%8E%AF%E4%BE%9D%E8%B5%96%E7%9A%84%E5%8F%91%E7%8E%B0%E4%B8%8E%E8%A7%A3%E5%86%B3/"/>
      <url>/2019/09/16/ioc%E5%BE%AA%E7%8E%AF%E4%BE%9D%E8%B5%96%E7%9A%84%E5%8F%91%E7%8E%B0%E4%B8%8E%E8%A7%A3%E5%86%B3/</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>最近在重构代码, 为框架添加Autofac作为ioc容器, 在处理业务层时, 遇到不同Service相互依赖的问题, 俗称循环依赖. 后来经过讨论解决了这个问题, 这里记录一下我们的探索过程.</p><h2 id="场景介绍"><a href="#场景介绍" class="headerlink" title="场景介绍"></a>场景介绍</h2><p>A服务依赖于B服务作为构造函数的参数, B服务依赖于A服务作为构造函数的参数, demo代码如下:</p><pre><code class="csharp">    public class ServiceA : IServiceA    {        private readonly IServiceB _serviceB;        public ServiceA(IServiceB serviceB)        {            _serviceB = serviceB;        }    }    public interface IServiceA {}    public class ServiceB : IServiceB    {        private readonly IServiceA _serviceA;        public ServiceB(IServiceA serviceA)        {            _serviceA = serviceA;        }    }    public interface IServiceB {}</code></pre><h2 id="第一次讨论"><a href="#第一次讨论" class="headerlink" title="第一次讨论"></a>第一次讨论</h2><p>因为.net中通常使用构造函数注入, 如果出现循环依赖, 那么第一步考虑的就是拆分服务A或者服务B, 将互调部分拆分出一个服务AB, 专门处理互调业务. demo代码:</p><pre><code class="csharp">    public class ServiceAB : IServiceAB    {        private readonly IServiceA _serviceA;        private readonly IServiceB _serviceB;        public ServiceB(IServiceA serviceA, IServiceB serviceB)        {            _serviceA = serviceA;            _serviceB = serviceB;        }    }    public interface IServiceAB {}</code></pre><p><strong>优点</strong>: 每个服务的作用比较独立和内聚, 也很简单的解决了循环依赖的问题.<br><strong>缺点</strong>: 在实际操作中拆分的规则和粒度很难把握, 会增加一些重复代码.</p><h2 id="讨论后的探索"><a href="#讨论后的探索" class="headerlink" title="讨论后的探索"></a>讨论后的探索</h2><p>因为Spring中使用常用注解[AutoWired]来进行注入, 且使用的是字段注入, 不会存在循环依赖的问题, 所以探索在Autofac中是否可以使用属性注入来解决这个问题, 尝试后发现可行, demo代码:</p><pre><code class="csharp">    public class ServiceA : IServiceA    {        [AutofacInject]        public IServiceB ServiceBImp {get; set;}    }    public class ServiceB : IServiceB    {        [AutofacInject]        public IServiceA ServiceAImp {get; set;}    }    //注入方式, Autofac 版本4.6.2    builder.RegisterType&lt;ServiceB&gt;().As&lt;IServiceB&gt;().SingleInstance().PropertiesAutowired(new PropertySelector(), true);    builder.RegisterType&lt;ServiceA&gt;().As&lt;IServiceA&gt;().SingleInstance().PropertiesAutowired(new PropertySelector(), true);    /// &lt;summary&gt;    /// Autofac 是否自动注入特性     /// &lt;/summary&gt;    public class AutofacInjectAttribute : Attribute    {        public bool Inject { get; set; } = true;         public AutofacInjectAttribute(bool inject = true)        {            Inject = inject;        }    }    public class PropertySelector : IPropertySelector    {        public bool InjectProperty(PropertyInfo propertyInfo, object instance)        {            var autofacInjectAttr = propertyInfo.GetCustomAttributes().FirstOrDefault(p =&gt; p.GetType() == typeof(AutofacInjectAttribute)) as AutofacInjectAttribute;            if (autofacInjectAttr == null)            {                return false;            }            return autofacInjectAttr.Inject;        }    }</code></pre><p>到此为止, 需求已经能完全满足我们的重构, 现在还留下了2个问题需要解决, ioc容器如何发现的循环依赖和属性注入如何解决循环依赖?</p><h2 id="ioc容器如何发现循环依赖"><a href="#ioc容器如何发现循环依赖" class="headerlink" title="ioc容器如何发现循环依赖"></a>ioc容器如何发现循环依赖</h2><p>在Autofac源码中, ResolveOperation.GetOrCreateInstance 方法中找到了答案, 下面是 GetOrCreateInstance的执行过程</p><ol><li>当前递归的层级加1</li><li>判定递归stack是否有循环依赖<ol><li>循环依赖条件1: 递归层级大于等于50</li><li>循环依赖条件2: 递归链上存在当前需要构造的对象</li></ol></li><li>构造对象</li><li>将步骤3构造的对象push到递归stack中</li><li>当前对象构造完成pop递归stack</li><li>递归层级减1</li></ol><pre><code class="csharp">    public object GetOrCreateInstance(ISharingLifetimeScope currentOperationScope, ResolveRequest request)    {        if (_ended) throw new ObjectDisposedException(ResolveOperationResources.TemporaryContextDisposed, innerException: null);        ++_callDepth;        if (_activationStack.Count &gt; 0)            CircularDependencyDetector.CheckForCircularDependency(request.Registration, _activationStack, _callDepth);        var activation = new InstanceLookup(this, currentOperationScope, request);        _activationStack.Push(activation);        var handler = InstanceLookupBeginning;        handler?.Invoke(this, new InstanceLookupBeginningEventArgs(activation));        try        {            var instance = activation.Execute();            _successfulActivations.Add(activation);            return instance;        }        finally        {             _activationStack.Pop();            if (_activationStack.Count == 0)            {                CompleteActivations();            }            --_callDepth;        }    }    public static void CheckForCircularDependency(IComponentRegistration registration, Stack&lt;InstanceLookup&gt; activationStack, int callDepth)    {        if (registration == null) throw new ArgumentNullException(nameof(registration));        if (callDepth &gt; MaxResolveDepth)            throw new DependencyResolutionException(string.Format(CultureInfo.CurrentCulture, CircularDependencyDetectorResources.MaxDepthExceeded, registration));        // Checks for circular dependency        foreach (var a in activationStack)        {            if (a.ComponentRegistration == registration)            {                throw new DependencyResolutionException(string.Format(CultureInfo.CurrentCulture, CircularDependencyDetectorResources.CircularDependency, CreateDependencyGraphTo(registration, activationStack)));            }        }    }</code></pre><h2 id="属性注入如何解决循环依赖"><a href="#属性注入如何解决循环依赖" class="headerlink" title="属性注入如何解决循环依赖"></a>属性注入如何解决循环依赖</h2><p>属性注入的解决依赖的前提: 1. 被循环依赖的属性比如是单例注入的; 2. 允许循环依赖 </p><pre><code class="csharp">    var serviceA = container.Resolve&lt;ServiceA&gt;(); </code></pre><p>下面是单例注入的执行步骤:</p><ol><li>获取ServiceA的实例, 因为注入方式是单例, 所以会缓存ServiceA的对象到_sharedInstances字典中.</li><li>解析ServiceA的属性IServiceB, 尝试从缓存_sharedInstances字典中查找, 如果找到直接赋值给属性并返回.</li><li>如果没有找到, 再构造一个ServiceB的实例缓存到_sharedInstances字典中, 并赋值给属性并返回.</li></ol><h2 id="隔壁Java-Spring如何解决循环依赖"><a href="#隔壁Java-Spring如何解决循环依赖" class="headerlink" title="隔壁Java Spring如何解决循环依赖"></a>隔壁Java Spring如何解决循环依赖</h2><p>核心思想相同, 都是需要缓存并未填充属性的单例对象, earlySingletonObjects 和 _sharedInstances 这两个集合对象的作用相同.</p><ol><li>singletonObject : 用于存放完全初始化好的bean, 从缓存中直接获取</li><li>earlySingletonObjects: 存放原始的bean对象(尚未填充属性), 用于解决循环依赖</li><li>singletonFactories: 存放bean工厂对象, 用于解决循环依赖</li></ol><h2 id="简单的循环依赖IOC处理Demo"><a href="#简单的循环依赖IOC处理Demo" class="headerlink" title="简单的循环依赖IOC处理Demo"></a>简单的循环依赖IOC处理Demo</h2><pre><code class="csharp">    static void Main(string[] args)    {        TinyIoc.Register&lt;IServiceA, ServiceA&gt;();        TinyIoc.Register&lt;IServiceB, ServiceB&gt;();                var serviceA = TinyIoc.GetByProp&lt;IServiceA&gt;();    }    class TinyIoc    {        private static Dictionary&lt;Type, Type&gt; _typeImplDic = new Dictionary&lt;Type, Type&gt;();        private static Dictionary&lt;Type, object&gt; _instanceTypeDic = new Dictionary&lt;Type, object&gt;(); // singletonObject        private static Dictionary&lt;Type, object&gt; _earlyInstanceTypeDic = new Dictionary&lt;Type, object&gt;(); // earlySingletonObjects        public static object GetByProp(Type typeofT)        {            if (_instanceTypeDic.ContainsKey(typeofT))             {                return _instanceTypeDic[typeofT];            }            if (_earlyInstanceTypeDic.ContainsKey(typeofT))            {                return _earlyInstanceTypeDic[typeofT];            }            var typeImp = _typeImplDic[typeofT];            var impObj = Activator.CreateInstance(typeImp); //singletonFactories             _earlyInstanceTypeDic.Add(typeofT, impObj);            var propes = typeImp.GetProperties();            foreach (var item in propes)            {                item.SetValue(impObj, GetByProp(item.PropertyType));            }            _instanceTypeDic.Add(typeofT, typeImp);            return impObj;        }        public static T GetByProp&lt;T&gt;()        {            var typeofT = typeof(T);            return (T)GetByProp(typeofT);        }        public static void Register&lt;IT, T&gt;()        {            _typeImplDic.Add(typeof(IT), typeof(T));        }     } </code></pre><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>学习使我快落</p><h3 id="代码托管地址"><a href="#代码托管地址" class="headerlink" title="代码托管地址"></a><a href="https://github.com/zhao4xi/TinyIocAndAop" target="_blank" rel="noopener">代码托管地址</a></h3>]]></content>
      
      
      <categories>
          
          <category> 框架 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ioc </tag>
            
            <tag> 循环依赖 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>https和http的区别与比较</title>
      <link href="/2019/01/28/https%E5%92%8Chttp%E7%9A%84%E5%8C%BA%E5%88%AB%E4%B8%8E%E6%AF%94%E8%BE%83/"/>
      <url>/2019/01/28/https%E5%92%8Chttp%E7%9A%84%E5%8C%BA%E5%88%AB%E4%B8%8E%E6%AF%94%E8%BE%83/</url>
      
        <content type="html"><![CDATA[<h2 id="http"><a href="#http" class="headerlink" title="http"></a>http</h2><p>是一个基于tcp/ip的应用层的的请求/响应式协议, 全称超文本传输协议.<br>特点: </p><ol><li>简单快速灵活, 常用方式 Post Get Put Delete , 支持多种传输数据类型</li><li>无状态, 多次请求没有状态保持</li><li>无连接, 每次处理一个请求</li><li>端口 80<br>不加密的, 任何内容都可能被伪装或者篡改</li></ol><h2 id="https"><a href="#https" class="headerlink" title="https"></a>https</h2><p>https = http + ssl加密 + 认证 + 完整性保护<br>https就是将http与tcp通信中层添加了一个ssl/tsl加密变成 http-&gt;ssl/tsl-&gt;tcp</p><p>特点:</p><ol><li>继承了http的所有特点</li><li>接口层使用了http和tcp直接新增了ssl/tsl协议(tsl 是 ssl 标准化后的名字)</li><li>因为ssl/tsl (引入了 证书/私钥/公钥)加密会耗费服务器资源, 所以默认提供http.</li><li>端口443<br>加密, 相对http较安全</li></ol><h2 id="SSL-TSL-传输层安全协议"><a href="#SSL-TSL-传输层安全协议" class="headerlink" title="SSL(TSL 传输层安全协议)"></a>SSL(TSL 传输层安全协议)</h2><p>安全套接层 基于 应用层和TCP层协议之间, 为数据通信提供安全组支持.<br>主要工作流程:</p><ol><li>客户端想服务器索要公钥<ol><li>判定公钥的证书是否由受信任的CA机构签发,是否有效等, 不是提示警告</li></ol></li><li>使用公钥加密一个随机值(私钥)发送给服务端</li><li>服务端使用私钥解密保存这个随机值, 双方基于这个随机值进行对称加密通信</li><li>服务器端使用随机值加密返回数据</li><li>客户端使用随机值解密<br>简化过程就是:</li><li>客户端向服务器端索要并验证公钥</li><li>双方协商生成”回话秘钥”</li><li>双方采用”回话秘钥”进行加密通信</li></ol><h2 id="总结区别"><a href="#总结区别" class="headerlink" title="总结区别"></a>总结区别</h2><ol><li>http 连接简单, 无状态, 明文传输; https 由SSL+http构建加密传输+ 身份认证, 比较安全, 但由于加密的缘故, 所以相对耗费资源.</li><li>http 和 https 连接方式不一致, http默认使用80端口, https使用443端口.</li><li>https 协议确认到ca证书, 需要一定费用.</li></ol>]]></content>
      
      
      <categories>
          
          <category> 协议 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> http </tag>
            
            <tag> https </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
